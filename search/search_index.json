{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tracer Backend","title":"Home"},{"location":"#tracer-backend","text":"","title":"Tracer Backend"},{"location":"about/","text":"","title":"About"},{"location":"backendar/","text":"","title":"Backend Architecture"},{"location":"caching/","text":"","title":"Caching"},{"location":"endpoints/","text":"Endpoints Used by Frontend Login POST /login Headers Content-Type: application/json Payload { \"email\" : \"<email>\", \"password\" : \"<password>\" } Response If Login Success: { \"STATUS\" : \"OK\", \"TOKEN\" : \"<accesstoken>\" } If Login Fail: { \"STATUS\" : \"FAIL\" } Register POST /register Headers Content-Type: application/json Payload { \"email\" : \"<email>\", \"password\" : \"<password>\" } Response If Email Verification Fail: { \"STATUS\" : \"FAIL\" } If Password Validation Fail: { \"STATUS\" : \"FAIL\" } If Email Unique Validation Fail: { \"STATUS\" : \"FAIL\" } If All Above Validation Success: { \"STATUS\" : \"OK\", \"TOKEN\" : \"<accesstoken>\" } Topup Headers Content-Type: application/json Token : <accesstoken> Payload { \"user_id\" : \"<user_id>\" } Response If Topup Success: { \"STATUS\" : \"OK\" } If Topup Fail (Less than 20 minutes delay between 2 topups): { \"STATUS\" : \"FAIL\" } URL POST /url Headers Content-Type: application/json Token : <accesstoken> Payload { \"redirect_url\" : \"<redirect_url>\" } Response If Url Validation Success: { \"STATUS\" : \"OK\" } If Url Validation Fail: { \"STATUS\" : \"FAIL\", \"URL_ID\" : \"<url_id>\" } Get /url Headers Content-Type: application/json Token : <accesstoken> Payload { \"user_id\" : \"<user_id>\" } Response If Urls Under User Fetched Success: { \"STATUS\" : \"OK\", \"DATA\" : \"<data>\" } If Urls Under User Fetched Fail: { \"STATUS\" : \"FAIL\" }","title":"Endpoints"},{"location":"endpoints/#endpoints-used-by-frontend","text":"","title":"Endpoints Used by Frontend"},{"location":"endpoints/#login","text":"POST /login","title":"Login"},{"location":"endpoints/#headers","text":"Content-Type: application/json","title":"Headers"},{"location":"endpoints/#payload","text":"{ \"email\" : \"<email>\", \"password\" : \"<password>\" }","title":"Payload"},{"location":"endpoints/#response","text":"If Login Success: { \"STATUS\" : \"OK\", \"TOKEN\" : \"<accesstoken>\" } If Login Fail: { \"STATUS\" : \"FAIL\" }","title":"Response"},{"location":"endpoints/#register","text":"POST /register","title":"Register"},{"location":"endpoints/#headers_1","text":"Content-Type: application/json","title":"Headers"},{"location":"endpoints/#payload_1","text":"{ \"email\" : \"<email>\", \"password\" : \"<password>\" }","title":"Payload"},{"location":"endpoints/#response_1","text":"If Email Verification Fail: { \"STATUS\" : \"FAIL\" } If Password Validation Fail: { \"STATUS\" : \"FAIL\" } If Email Unique Validation Fail: { \"STATUS\" : \"FAIL\" } If All Above Validation Success: { \"STATUS\" : \"OK\", \"TOKEN\" : \"<accesstoken>\" }","title":"Response"},{"location":"endpoints/#topup","text":"","title":"Topup"},{"location":"endpoints/#headers_2","text":"Content-Type: application/json Token : <accesstoken>","title":"Headers"},{"location":"endpoints/#payload_2","text":"{ \"user_id\" : \"<user_id>\" }","title":"Payload"},{"location":"endpoints/#response_2","text":"If Topup Success: { \"STATUS\" : \"OK\" } If Topup Fail (Less than 20 minutes delay between 2 topups): { \"STATUS\" : \"FAIL\" }","title":"Response"},{"location":"endpoints/#url","text":"POST /url","title":"URL"},{"location":"endpoints/#headers_3","text":"Content-Type: application/json Token : <accesstoken>","title":"Headers"},{"location":"endpoints/#payload_3","text":"{ \"redirect_url\" : \"<redirect_url>\" }","title":"Payload"},{"location":"endpoints/#response_3","text":"If Url Validation Success: { \"STATUS\" : \"OK\" } If Url Validation Fail: { \"STATUS\" : \"FAIL\", \"URL_ID\" : \"<url_id>\" } Get /url","title":"Response"},{"location":"endpoints/#headers_4","text":"Content-Type: application/json Token : <accesstoken>","title":"Headers"},{"location":"endpoints/#payload_4","text":"{ \"user_id\" : \"<user_id>\" }","title":"Payload"},{"location":"endpoints/#response_4","text":"If Urls Under User Fetched Success: { \"STATUS\" : \"OK\", \"DATA\" : \"<data>\" } If Urls Under User Fetched Fail: { \"STATUS\" : \"FAIL\" }","title":"Response"},{"location":"logger/","text":"TracerLogger This Document explains Internal Working as well as Usage of TracerLogger Overview TracerLogger is nothing but a Mapper which maps Interface to LoggingInterface . Whenever a log request is received, it identifies associated LoggingInterface and forwards that request to that interface. Note Main logic stays in LoggingInterface. TracerLogger is just a manager for these interfaces. from Logger import TracerLogger, LoggingInterface logger = TracerLogger() logger.logError('InterfaceName', 'Message', 'UniqueKey') LoggingInterface Whenever you write a large scale application, you split it into layers . Here, in Tracer, we refer each level as interface. Consider analogy from OSI model. Everything is segregated into levels. Here, in Tracer, levels or Interfaces are Router , Interfaces , Data_Functions . Each request has to go through there levels/Interface. More details on levels mentioned here. Link to be added later. So, TracerLogger takes in array if these interfaces so you don't have to manage location of log data and you dont waste time in finding your logs. from Logger import LoggingInterface interface = LoggingInterface('Name') Now, every LoggingInterface as three logging levels implemented, namely Error , Info , Debug . Each logging level has a separate file and is continuosly logError() LoggingInterface.errorLog(message, uniqueid) This method will write to file /logs/interfacename/error.log logInfo() LoggingInterface.logInfo(message, uniqueid) This method will write to file /logs/interfacename/info.log logDebug() LoggingInterface.logDebug(message, uniqueid) This method will write to file /logs/interfacename/debug.log","title":"Logger"},{"location":"logger/#tracerlogger","text":"This Document explains Internal Working as well as Usage of TracerLogger","title":"TracerLogger"},{"location":"logger/#overview","text":"TracerLogger is nothing but a Mapper which maps Interface to LoggingInterface . Whenever a log request is received, it identifies associated LoggingInterface and forwards that request to that interface. Note Main logic stays in LoggingInterface. TracerLogger is just a manager for these interfaces. from Logger import TracerLogger, LoggingInterface logger = TracerLogger() logger.logError('InterfaceName', 'Message', 'UniqueKey')","title":"Overview"},{"location":"logger/#logginginterface","text":"Whenever you write a large scale application, you split it into layers . Here, in Tracer, we refer each level as interface. Consider analogy from OSI model. Everything is segregated into levels. Here, in Tracer, levels or Interfaces are Router , Interfaces , Data_Functions . Each request has to go through there levels/Interface. More details on levels mentioned here. Link to be added later. So, TracerLogger takes in array if these interfaces so you don't have to manage location of log data and you dont waste time in finding your logs. from Logger import LoggingInterface interface = LoggingInterface('Name') Now, every LoggingInterface as three logging levels implemented, namely Error , Info , Debug . Each logging level has a separate file and is continuosly","title":"LoggingInterface"},{"location":"logger/#logerror","text":"LoggingInterface.errorLog(message, uniqueid) This method will write to file /logs/interfacename/error.log","title":"logError()"},{"location":"logger/#loginfo","text":"LoggingInterface.logInfo(message, uniqueid) This method will write to file /logs/interfacename/info.log","title":"logInfo()"},{"location":"logger/#logdebug","text":"LoggingInterface.logDebug(message, uniqueid) This method will write to file /logs/interfacename/debug.log","title":"logDebug()"},{"location":"scheduler/","text":"","title":"Scheduler"}]}